'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _getFormData = require('get-form-data');

var _getFormData2 = _interopRequireDefault(_getFormData);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var _React$PropTypes = _react2.default.PropTypes,
    any = _React$PropTypes.any,
    func = _React$PropTypes.func,
    number = _React$PropTypes.number,
    object = _React$PropTypes.object,
    oneOfType = _React$PropTypes.oneOfType,
    shape = _React$PropTypes.shape,
    string = _React$PropTypes.string;
var toString = Object.prototype.toString;


var typeOf = function typeOf(o) {
  return toString.call(o).slice(8, -1).toLowerCase();
};

function resolveToLocation(to, router) {
  switch (typeOf(to)) {
    case 'function':
      return to(router.location);
    case 'string':
      return { pathname: to };
  }
  return to;
}

// XXX Reproducing ContextSubscriber from react-router/modules/ContextUtils.js
// so we don't have to import the router, plus it's not available in the UMD
// build. << ^D

// Works around issues with context updates failing to propagate.
// Caveat: the context value is expected to never change its identity.
// https://github.com/facebook/react/issues/2517
// https://github.com/reactjs/react-router/issues/470

function ContextSubscriber(name) {
  var _contextTypes, _ref2;

  var contextName = '@@contextSubscriber/' + name;
  var lastRenderedEventIndexKey = contextName + '/lastRenderedEventIndex';
  var handleContextUpdateKey = contextName + '/handleContextUpdate';
  var unsubscribeKey = contextName + '/unsubscribe';

  return _ref2 = {
    contextTypes: (_contextTypes = {}, _contextTypes[contextName] = shape({
      subscribe: func.isRequired,
      eventIndex: number.isRequired
    }), _contextTypes),

    getInitialState: function getInitialState() {
      var _ref;

      if (!this.context[contextName]) {
        return {};
      }

      return _ref = {}, _ref[lastRenderedEventIndexKey] = this.context[contextName].eventIndex, _ref;
    },
    componentDidMount: function componentDidMount() {
      if (!this.context[contextName]) {
        return;
      }

      this[unsubscribeKey] = this.context[contextName].subscribe(this[handleContextUpdateKey]);
    },
    componentWillReceiveProps: function componentWillReceiveProps() {
      var _setState;

      if (!this.context[contextName]) {
        return;
      }

      this.setState((_setState = {}, _setState[lastRenderedEventIndexKey] = this.context[contextName].eventIndex, _setState));
    },
    componentWillUnmount: function componentWillUnmount() {
      if (!this[unsubscribeKey]) {
        return;
      }

      this[unsubscribeKey]();
      this[unsubscribeKey] = null;
    }
  }, _ref2[handleContextUpdateKey] = function (eventIndex) {
    if (eventIndex !== this.state[lastRenderedEventIndexKey]) {
      var _setState2;

      this.setState((_setState2 = {}, _setState2[lastRenderedEventIndexKey] = eventIndex, _setState2));
    }
  }, _ref2;
}

// ^D

/**
 * <Form> components are used to create a <form> element that submits its input
 * data to a route.
 *
 * For example, assuming you have the following route:
 *
 *   <Route path="/topics/:topicId/add-post" onEnter={handleAddPost}/>
 *
 * You could use the following component to submit a form's input data to that
 * route as location state:
 *
 *   <Form to={`/topics/${topicId}/add-post`} method="POST">
 */
var Form = _react2.default.createClass({
  displayName: 'Form',

  mixins: [ContextSubscriber('router')],

  contextTypes: {
    router: shape({
      push: func.isRequired,
      replace: func.isRequired,
      go: func.isRequired,
      goBack: func.isRequired,
      goForward: func.isRequired,
      setRouteLeaveHook: func.isRequired,
      isActive: func.isRequired
    })
  },

  propTypes: {
    to: oneOfType([string, object, func]),

    component: any,
    dataKey: string,
    extractFormData: func,
    methodKey: string,
    onSubmit: func
  },

  getDefaultProps: function getDefaultProps() {
    return {
      component: 'form',
      dataKey: 'body',
      extractFormData: _getFormData2.default,
      method: 'GET',
      methodKey: 'method'
    };
  },
  handleSubmit: function handleSubmit(event) {
    var formData = this.props.extractFormData(event.target);

    if (this.props.onSubmit) {
      this.props.onSubmit(event, formData);
    }

    if (event.defaultPrevented) {
      return;
    }

    event.preventDefault();

    var router = this.context.router;

    (0, _invariant2.default)(router, '<Form>s rendered outside of a router context cannot submit.');

    var _props = this.props,
        dataKey = _props.dataKey,
        method = _props.method,
        methodKey = _props.methodKey,
        to = _props.to;

    var submitLocation = resolveToLocation(to, router);

    if (method === 'GET') {
      // GET submissions use the query string, so just merge form data into it
      submitLocation.query = _extends({}, submitLocation.query, formData);
    } else {
      var _extends2;

      submitLocation.state = _extends({}, submitLocation.state, (_extends2 = {}, _extends2[methodKey] = method, _extends2[dataKey] = formData, _extends2));
    }

    router.push(submitLocation);
  },
  render: function render() {
    var _props2 = this.props,
        component = _props2.component,
        dataKey = _props2.dataKey,
        extractFormData = _props2.extractFormData,
        methodKey = _props2.methodKey,
        onSubmit = _props2.onSubmit,
        to = _props2.to,
        props = _objectWithoutProperties(_props2, ['component', 'dataKey', 'extractFormData', 'methodKey', 'onSubmit', 'to']);

    var router = this.context.router;


    if (router) {
      props.action = router.createHref(resolveToLocation(to, router));
    }

    return _react2.default.createElement(this.props.component, _extends({}, props, { onSubmit: this.handleSubmit }));
  }
});

exports.default = Form;
module.exports = exports['default'];